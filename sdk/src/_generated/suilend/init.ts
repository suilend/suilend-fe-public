import * as cell from "./cell/structs";
import * as decimal from "./decimal/structs";
import * as lendingMarketRegistry from "./lending-market-registry/structs";
import * as lendingMarket from "./lending-market/structs";
import * as liquidityMining from "./liquidity-mining/structs";
import * as obligation from "./obligation/structs";
import * as rateLimiter from "./rate-limiter/structs";
import * as reserveConfig from "./reserve-config/structs";
import * as reserve from "./reserve/structs";
import * as staker from "./staker/structs";
import * as suilend from "./suilend/structs";
import { StructClassLoader } from "../_framework/loader";

export function registerClasses(loader: StructClassLoader) {
  loader.register(suilend.MAIN_POOL);
  loader.register(cell.Cell);
  loader.register(decimal.Decimal);
  loader.register(reserveConfig.ReserveConfig);
  loader.register(reserveConfig.ReserveConfigBuilder);
  loader.register(staker.Staker);
  loader.register(liquidityMining.PoolReward);
  loader.register(liquidityMining.PoolRewardManager);
  loader.register(liquidityMining.RewardBalance);
  loader.register(liquidityMining.UserReward);
  loader.register(liquidityMining.UserRewardManager);
  loader.register(reserve.BalanceKey);
  loader.register(reserve.Balances);
  loader.register(reserve.CToken);
  loader.register(reserve.ClaimStakingRewardsEvent);
  loader.register(reserve.InterestUpdateEvent);
  loader.register(reserve.LiquidityRequest);
  loader.register(reserve.Reserve);
  loader.register(reserve.ReserveAssetDataEvent);
  loader.register(reserve.StakerKey);
  loader.register(rateLimiter.RateLimiter);
  loader.register(rateLimiter.RateLimiterConfig);
  loader.register(obligation.Borrow);
  loader.register(obligation.BorrowRecord);
  loader.register(obligation.Deposit);
  loader.register(obligation.DepositRecord);
  loader.register(obligation.Obligation);
  loader.register(obligation.ObligationDataEvent);
  loader.register(lendingMarket.MintEvent);
  loader.register(lendingMarket.RedeemEvent);
  loader.register(lendingMarket.BorrowEvent);
  loader.register(lendingMarket.ClaimRewardEvent);
  loader.register(lendingMarket.DepositEvent);
  loader.register(lendingMarket.FeeReceivers);
  loader.register(lendingMarket.FeeReceiversKey);
  loader.register(lendingMarket.ForgiveEvent);
  loader.register(lendingMarket.LENDING_MARKET);
  loader.register(lendingMarket.LendingMarket);
  loader.register(lendingMarket.LendingMarketOwnerCap);
  loader.register(lendingMarket.LiquidateEvent);
  loader.register(lendingMarket.ObligationOwnerCap);
  loader.register(lendingMarket.RateLimiterExemption);
  loader.register(lendingMarket.RepayEvent);
  loader.register(lendingMarket.WithdrawEvent);
  loader.register(lendingMarketRegistry.LENDING_MARKET_2);
  loader.register(lendingMarketRegistry.Registry);
}
